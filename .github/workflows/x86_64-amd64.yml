name: x86_64/amd64

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: 0 0 * * *

env:
  PREFIX_URL: https://storage.openwrt.cc/snapshots/targets
  DEVICE_TARGET: x86
  DEVICE_SUBTARGET: 64
  DEVICE_PLATFORM: x86_64
  DOCKER_IMAGE_ARCH: linux/amd64
  DOCKER_DEVICE_TAG: x86_64
  ARCH_TAG: amd64

jobs:
  Publish:
    runs-on: ubuntu-18.04

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential libncurses5-dev libncursesw5-dev \
          zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip python qemu-utils

    - name: Set Up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set Up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login To DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PWD }}

    - name: Login To Alibaba Cloud Container Registry
      run: |
        docker login -u ${{ secrets.ALIYUN_USERNAME }} -p ${{ secrets.ALIYUN_PWD }} registry.cn-shanghai.aliyuncs.com

    - name: Download Image Builder
      run: |
        wget -q $PREFIX_URL/$DEVICE_TARGET/$DEVICE_SUBTARGET/immortalwrt-imagebuilder-$DEVICE_TARGET-$DEVICE_SUBTARGET.Linux-x86_64.tar.xz

    - name: Set Mini Image Builder
      run: |
        tar -xJf *.tar.xz
        cd immortalwrt-imagebuilder-$DEVICE_TARGET-$DEVICE_SUBTARGET.Linux-x86_64
        cp -f $GITHUB_WORKSPACE/config/repositories.conf .
        sed -i "s/DEVICE_SUBTARGET/$DEVICE_SUBTARGET/g; \
          s/DEVICE_TARGET/$DEVICE_TARGET/g; \
          s/DEVICE_PLATFORM/$DEVICE_PLATFORM/g" repositories.conf
        cp -rf $GITHUB_WORKSPACE/files .
        chmod +x files/etc/rc.local
        export KERNEL_VERSION="$(ls packages | grep kernel | awk -F '_' '{print $2}')"
        sed -i "s/DEVICE_SUBTARGET/$DEVICE_SUBTARGET/g; \
          s/DEVICE_TARGET/$DEVICE_TARGET/g; \
          s/KERNEL_VERSION/$KERNEL_VERSION/g; \
          s/DEVICE_PLATFORM/$DEVICE_PLATFORM/g" files/etc/opkg/distfeeds.conf

    - name: Build Mini RootFS
      run: |
        cd immortalwrt-imagebuilder-$DEVICE_TARGET-$DEVICE_SUBTARGET.Linux-x86_64
        sed -i "/CONFIG_TARGET_ROOTFS_SQUASHFS/s/.*/# CONFIG_TARGET_ROOTFS_SQUASHFS is not set/;
          /CONFIG_TARGET_ROOTFS_EXT4FS/s/.*/# CONFIG_TARGET_ROOTFS_EXT4FS is not set/" .config
        export CONFIG_MINI_PACKAGES=$(cat $GITHUB_WORKSPACE/config/mini-packages.config | tr -s "\n" " ")
        make image PACKAGES="$CONFIG_MINI_PACKAGES" FILES="files"
        cp bin/targets/$DEVICE_TARGET/$DEVICE_SUBTARGET/*rootfs.tar.gz $GITHUB_WORKSPACE
        cd $GITHUB_WORKSPACE
        rm -rf immortalwrt-imagebuilder-$DEVICE_TARGET-$DEVICE_SUBTARGET.Linux-x86_64

    - name: Build & Push Mini Image
      uses: docker/build-push-action@v2
      with:
        platforms: ${{ env.DOCKER_IMAGE_ARCH }}
        file: Dockerfile
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/openwrt-mini:${{ env.DOCKER_DEVICE_TAG }}
          ${{ secrets.DOCKERHUB_USERNAME }}/openwrt-mini:${{ env.ARCH_TAG }}
          registry.cn-shanghai.aliyuncs.com/${{ secrets.ALIYUN_NAMESPACES }}/openwrt-mini:${{ env.DOCKER_DEVICE_TAG }}
          registry.cn-shanghai.aliyuncs.com/${{ secrets.ALIYUN_NAMESPACES }}/openwrt-mini:${{ env.ARCH_TAG }}

    - name: Set Normal Image Builder
      run: |
        tar -xJf *.tar.xz
        cd immortalwrt-imagebuilder-$DEVICE_TARGET-$DEVICE_SUBTARGET.Linux-x86_64
        cp -f $GITHUB_WORKSPACE/config/repositories.conf .
        sed -i "s/DEVICE_SUBTARGET/$DEVICE_SUBTARGET/g; \
          s/DEVICE_TARGET/$DEVICE_TARGET/g; \
          s/DEVICE_PLATFORM/$DEVICE_PLATFORM/g" repositories.conf
        cp -rf $GITHUB_WORKSPACE/files .
        chmod +x files/etc/rc.local
        export KERNEL_VERSION="$(ls packages | grep kernel | awk -F '_' '{print $2}')"
        sed -i "s/DEVICE_SUBTARGET/$DEVICE_SUBTARGET/g; \
          s/DEVICE_TARGET/$DEVICE_TARGET/g; \
          s/KERNEL_VERSION/$KERNEL_VERSION/g; \
          s/DEVICE_PLATFORM/$DEVICE_PLATFORM/g" files/etc/opkg/distfeeds.conf

    - name: Build Normal RootFS
      run: |
        cd immortalwrt-imagebuilder-$DEVICE_TARGET-$DEVICE_SUBTARGET.Linux-x86_64
        chmod +x $GITHUB_WORKSPACE/scripts/*
        $GITHUB_WORKSPACE/scripts/preset-clash-core.sh $ARCH_TAG
        $GITHUB_WORKSPACE/scripts/preset-terminal-tools.sh
        sed -i "/CONFIG_TARGET_ROOTFS_SQUASHFS/s/.*/# CONFIG_TARGET_ROOTFS_SQUASHFS is not set/;
          /CONFIG_TARGET_ROOTFS_EXT4FS/s/.*/# CONFIG_TARGET_ROOTFS_EXT4FS is not set/" .config
        export CONFIG_NORMAL_PACKAGES=$(cat $GITHUB_WORKSPACE/config/normal-packages.config | tr -s "\n" " ")
        make image PACKAGES="$CONFIG_NORMAL_PACKAGES" FILES="files"
        cp bin/targets/$DEVICE_TARGET/$DEVICE_SUBTARGET/*rootfs.tar.gz $GITHUB_WORKSPACE
        cd $GITHUB_WORKSPACE
        rm -rf immortalwrt-imagebuilder*

    - name: Build & Push Normal Image
      uses: docker/build-push-action@v2
      with:
        platforms: ${{ env.DOCKER_IMAGE_ARCH }}
        file: Dockerfile
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/openwrt:${{ env.DOCKER_DEVICE_TAG }}
          ${{ secrets.DOCKERHUB_USERNAME }}/openwrt:${{ env.ARCH_TAG }}
          registry.cn-shanghai.aliyuncs.com/${{ secrets.ALIYUN_NAMESPACES }}/openwrt:${{ env.DOCKER_DEVICE_TAG }}
          registry.cn-shanghai.aliyuncs.com/${{ secrets.ALIYUN_NAMESPACES }}/openwrt:${{ env.ARCH_TAG }}
